# infra/compose/docker-compose.yml
# СТРОКА 'version' УДАЛЕНА, Т.К. ОНА УСТАРЕЛА
services:
  mongo:
    image: mongo:latest
    container_name: scb_mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - scb_network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: scb_clickhouse
    restart: always
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB_FOR_SCB_WAREHOUSE:-scb_warehouse}
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - scb_network

  backend:
    build:
      context: ../../
      dockerfile: infra/docker/backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../../backend/app:/app/backend/app
      - ../../scripts:/app/scripts
    env_file:
      - .env
    depends_on:
      - mongo
      - clickhouse
    # ИЗМЕНЕНИЕ: Заменено `tail` на `uvicorn` для hot-reloading
    command: poetry run uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/backend/app
    restart: unless-stopped
    networks:
      - scb_network

  frontend:
    build:
      context: ../../
      dockerfile: ./infra/docker/frontend/Dockerfile
    container_name: scb_frontend
    ports:
      - "5173:5173"
    volumes:
      - ../../frontend/src:/app/src
      - ../../frontend/public:/app/public
      - /app/node_modules
    env_file:
      - .env
    # ИЗМЕНЕНИЕ: Добавлена команда для запуска dev-сервера
    command: npm run dev -- --host
    networks:
      - scb_network
    restart: unless-stopped
    depends_on:
      - backend

  # --- Airflow Services ---
  postgres:
    image: postgres:13
    container_name: scb_airflow_postgres
    restart: always
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER:-airflow}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD:-airflow}
      POSTGRES_DB: ${AIRFLOW_DB_NAME:-airflow}
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-airflow} -d $${POSTGRES_DB:-airflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scb_network

  redis:
    image: redis:latest
    container_name: scb_airflow_redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scb_network

  airflow-init:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_init
    env_file:
      - .env
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: /opt/airflow/etl_project/.venv/lib/python3.10/site-packages:/opt/airflow/etl_project:/opt/airflow/dags:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    entrypoint: /bin/bash
    command: -c "airflow db migrate && (airflow users create --username admin --password admin --firstname SCB --lastname Admin --role Admin --email admin@example.com || true)"
    networks:
      - scb_network

  airflow-webserver:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_webserver
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      MONGO_DB_URL: ${MONGO_DB_URL}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
      PYTHONPATH: /opt/airflow/etl_project/.venv/lib/python3.10/site-packages:/opt/airflow/etl_project:/opt/airflow/dags:/opt/airflow/plugins
    ports:
      - "8080:8080"
    volumes:
      - ../../etl/dags:/opt/airflow/dags
      - ../../etl/src:/opt/airflow/etl_project/etl_src
      - ../../ontology:/opt/airflow/ontology_repo_local_clone
      - airflow_logs:/opt/airflow/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scb_network

  airflow-scheduler:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_scheduler
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      MONGO_DB_URL: ${MONGO_DB_URL}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: /opt/airflow/etl_project/.venv/lib/python3.10/site-packages:/opt/airflow/etl_project:/opt/airflow/dags:/opt/airflow/plugins
    volumes:
      - ../../etl/dags:/opt/airflow/dags
      - ../../etl/src:/opt/airflow/etl_project/etl_src
      - ../../ontology:/opt/airflow/ontology_repo_local_clone
      - airflow_logs:/opt/airflow/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-webserver:
        condition: service_healthy
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --limit 1 --local"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - scb_network

  airflow-worker:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_worker
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      MONGO_DB_URL: ${MONGO_DB_URL}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: /opt/airflow/etl_project/.venv/lib/python3.10/site-packages:/opt/airflow/etl_project:/opt/airflow/dags:/opt/airflow/plugins
    volumes:
      - ../../etl/dags:/opt/airflow/dags
      - ../../etl/src:/opt/airflow/etl_project/etl_src
      - ../../ontology:/opt/airflow/ontology_repo_local_clone
      - airflow_logs:/opt/airflow/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-scheduler:
        condition: service_healthy
    command: celery worker
    healthcheck:
      test: ["CMD-SHELL", "celery -A airflow.providers.celery.executors.celery_executor.app status || celery -A airflow.executors.celery_executor.app status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scb_network

volumes:
  mongo_data:
  clickhouse_data:
  airflow_postgres_data:
  airflow_logs:

# --- ИСПРАВЛЕНИЕ СЕТИ ---
networks:
  scb_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
    driver_opts:
      com.docker.network.driver.mtu: 1400