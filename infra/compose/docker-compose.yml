version: '3.8'

services:
  mongo:
    image: mongo:latest
    container_name: scb_mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - scb_network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: scb_clickhouse
    restart: always
    ports:
      - "8123:8123" # HTTP interface
      - "9000:9000" # Native TCP interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-default}
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - scb_network

  backend:
    build:
      context: ../../
      dockerfile: ./infra/docker/backend/Dockerfile
    container_name: scb_backend
    ports:
      - "8000:8000"
    volumes:
      - ../../backend:/app/backend # Для hot-reloading кода бэкенда
    env_file:
      - .env
    depends_on:
      - mongo
      - clickhouse
    networks:
      - scb_network

  frontend:
    build:
      context: ../../
      dockerfile: ./infra/docker/frontend/Dockerfile
    container_name: scb_frontend
    ports:
      - "5173:5173"
    volumes:
      - ../../frontend/src:/app/src         # Для hot-reloading кода фронтенда
      - ../../frontend/public:/app/public   # Для статики
      - /app/node_modules                   # Изолируем node_modules контейнера
    env_file:
      - .env
    # depends_on: # Обычно фронтенд не зависит от бэкенда на уровне запуска контейнера
    #   - backend
    networks:
      - scb_network

  # --- Airflow Services ---
  postgres:
    image: postgres:13
    container_name: scb_airflow_postgres
    restart: always
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER:-airflow}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD:-airflow}
      POSTGRES_DB: ${AIRFLOW_DB_NAME:-airflow}
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${AIRFLOW_DB_USER:-airflow} -d ${AIRFLOW_DB_NAME:-airflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scb_network

  redis:
    image: redis:latest
    container_name: scb_airflow_redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - scb_network

  airflow-init:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_init
    env_file:
      - .env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false" # Отключаем примеры DAG'ов
      PYTHONPATH: /opt/airflow/dags:/opt/airflow/etl_src:${PYTHONPATH}
    depends_on:
      - postgres
      - redis
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create --username admin --password admin --firstname SCB --lastname Admin --role Admin --email admin@example.com"
    networks:
      - scb_network

  airflow-webserver:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_webserver
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      # Переменные для подключения к вашим БД из ETL кода, если нужны
      MONGO_CONN_STR: mongodb://mongo:27017/ # Пример, имя сервиса 'mongo'
      MONGO_DB_NAME: ${MONGO_DB_NAME:-scb_db_data_lake}
      # Переменные для Airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth" # Для базовой API аутентификации, если нужна
      PYTHONPATH: /opt/airflow/dags:/opt/airflow/etl_src:${PYTHONPATH}
    ports:
      - "8080:8080"
    volumes:
      - ../../etl/dags:/opt/airflow/dags
      - ../../etl/src:/opt/airflow/etl_src
      - ../../ontology:/opt/airflow/ontology # Изменено для ясности, если это путь к Git репо
      - airflow_logs:/opt/airflow/logs
    depends_on:
      postgres:
        condition: service_healthy # Ожидаем, пока postgres будет здоров (нужен healthcheck у postgres)
      redis:
        condition: service_started # Ожидаем старта redis
      airflow-init:
        condition: service_completed_successfully # Ожидаем успешного завершения init
    command: webserver # Стандартная команда для Airflow Webserver
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scb_network

  airflow-scheduler:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_scheduler
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      MONGO_CONN_STR: mongodb://mongo:27017/
      MONGO_DB_NAME: ${MONGO_DB_NAME:-scb_db_data_lake}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: /opt/airflow/dags:/opt/airflow/etl_src:${PYTHONPATH}
    volumes:
      - ../../etl/dags:/opt/airflow/dags
      - ../../etl/src:/opt/airflow/etl_src
      - ../../ontology:/opt/airflow/ontology
      - airflow_logs:/opt/airflow/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      airflow-init:
        condition: service_completed_successfully
      airflow-webserver: # Scheduler может зависеть от webserver для некоторых фич, но не критично для старта
        condition: service_healthy
    command: scheduler # Стандартная команда для Airflow Scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --limit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scb_network

  airflow-worker:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_worker
    restart: always
    env_file:
      - .env
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      MONGO_CONN_STR: mongodb://mongo:27017/
      MONGO_DB_NAME: ${MONGO_DB_NAME:-scb_db_data_lake}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@postgres:5432/${AIRFLOW_DB_NAME:-airflow}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: /opt/airflow/dags:/opt/airflow/etl_src:${PYTHONPATH}
    volumes:
      - ../../etl/dags:/opt/airflow/dags
      - ../../etl/src:/opt/airflow/etl_src
      - ../../ontology:/opt/airflow/ontology
      - airflow_logs:/opt/airflow/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      airflow-scheduler: # Worker зависит от scheduler
        condition: service_healthy
    command: celery worker # ИСПРАВЛЕНО: правильная команда для Celery воркера
    healthcheck: # Простой healthcheck для воркера Celery
      test: ["CMD-SHELL", "celery -A airflow.providers.celery.executors.celery_executor.app inspect ping -d celery@$$HOSTNAME || celery -A airflow.executors.celery_executor.app inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scb_network

volumes:
  mongo_data:
  clickhouse_data:
  airflow_postgres_data:
  airflow_logs:

networks:
  scb_network:
    driver: bridge