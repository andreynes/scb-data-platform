version: '3.8'

services:
  mongo:
    image: mongo:latest
    container_name: scb_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    restart: always
    networks:
      - scb_network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: scb_clickhouse
    ports:
      - "8123:8123" # Правильный HTTP порт для ClickHouse
      - "9000:9000" # Правильный нативный порт для ClickHouse
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
    restart: always
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scb_network

  
  backend:
    build:
      context: ../..
      dockerfile: infra/docker/backend/Dockerfile
    container_name: scb_backend
    ports:
      - "8000:8000"
    # volumes: # Пока оставляем закомментированным для чистоты
    #   - ../../backend/app:/app/app
    env_file:
      - .env
    # Команда теперь не нужна, так как она жестко задана в Dockerfile
    # command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      mongo:
        condition: service_started 
      clickhouse:
        condition: service_healthy 
    restart: always
    networks:
      - scb_network
  frontend:
    build:
      context: ../../
      dockerfile: ./infra/docker/frontend/Dockerfile
    container_name: scb_frontend
    ports:
      - "5173:5173"
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    env_file:
      - .env
    command: npm run dev -- --host # <-- Важный флаг для Vite
    restart: always
    depends_on:
      - backend
    networks:
      - scb_network

  # --- Airflow Services ---
  postgres:
    image: postgres:13
    container_name: scb_airflow_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-airflow} -d $${POSTGRES_DB:-airflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scb_network

  redis:
    image: redis:latest
    container_name: scb_airflow_redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scb_network

  airflow-init:
    build:
      context: ../..
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_init
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    entrypoint: /bin/bash
    command: -c "airflow db migrate && (airflow users create --username admin --password admin --firstname SCB --lastname Admin --role Admin --email admin@example.com || true)"
    networks:
      - scb_network

  airflow-webserver:
    build:
      context: ../..
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_webserver
    restart: always
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - ../../etl/dags:/opt/airflow/dags # Обновил путь для консистентности
      - airflow_logs:/opt/airflow/logs
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scb_network

  airflow-scheduler:
    build:
      context: ../..
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_scheduler
    restart: always
    env_file:
      - .env
    volumes:
      - ../../etl/dags:/opt/airflow/dags # Обновил путь
      - airflow_logs:/opt/airflow/logs
    depends_on:
      airflow-webserver:
        condition: service_healthy
    command: scheduler
    networks:
      - scb_network

  airflow-worker:
    build:
      context: ../../
      dockerfile: ./infra/docker/etl/Dockerfile
    container_name: scb_airflow_worker
    restart: always
    env_file:
      - .env
    volumes:
      - ../../etl/dags:/opt/airflow/dags # Обновил путь
      - airflow_logs:/opt/airflow/logs
    depends_on:
      airflow-scheduler:
        condition: service_started
    command: celery worker
    networks:
      - scb_network

volumes:
  mongo_data:
  clickhouse_data:
  airflow_postgres_data:
  airflow_logs:

networks:
  scb_network:
    driver: bridge